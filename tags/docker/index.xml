<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Gilfoyle Blogs</title>
    <link>https://songyintao.github.io/tags/docker/</link>
    <description>Recent content in Docker on Gilfoyle Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2018–2018, @Gilfoyle</copyright>
    <lastBuildDate>Sat, 24 Nov 2018 22:49:28 +0800</lastBuildDate>
    
	<atom:link href="https://songyintao.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nile 设计文档</title>
      <link>https://songyintao.github.io/post/nile-%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 24 Nov 2018 22:49:28 +0800</pubDate>
      
      <guid>https://songyintao.github.io/post/nile-%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</guid>
      <description>Nile 设计文档 1. 需求   容器健康检查（提供端口，用来检测容器的健康状态）; App健康检查（提供接口来检测应用的健康状态）; 采集App的基本信息（appName、label(隔离组)、ip+port）上报zk； 容器下线时，清除zk中的消息（或者在创建的时候带上键值的过期时间zk数据自动删除）; 日志查看功能，提供错误日志定位功能。实现方式：基于Nile的端口，elogs连接到容器，查看日志； 其他。。。   2. 可行性分析 1. 容器健康检查  目的： 检测容器是否启动，避免测试环境隔离时测试的应用失败，从而访问基础环境的应用
方法： 创建一个Web应用，暴露固定的端口。
 2. App健康检查  目的： 检测App是否正常运行
方法： 对接XDCS的health的接口或者提供用户自定义的健康监测接口
 3. 采集App的基本信息  目的：提供环境隔离相关的信息，appName、label(隔离组)、ip+port。注册到Zookeeper。
方法：根据容器注入的环境变量生成信息，提交到ZK
 4. 容器下线，zk数据更新  目的： 隔离组项目有租约时间，用户可以续租或到期后资源回收，销毁容器。这时需要更新zk下隔离组的信息
方法： zk使用临时节点存储，设置过期时间。在发布后台，提供定时任务，清除回收容器。
 5. 日志查看功能  目的：解决App启动失败，用户可以回到现场查看日志，查找定位问题。
方法：基于Nile的端口或者elogs登录容器，查看日志。
 3. 技术实现 采用go实现一个web项目，满足上面5点需求，作为一个基础镜像。
 针对k8s，生成一个独立的容器和App容器一起构成一个POD； 针对marathon，该web和App一起构成一个容器；  web项目提供restful接口，可供查询当前容器+应用的状态、应用的日志信息。开放一个端口用于marathon和k8s的健康监测。
===&amp;gt;也就是说，接口相同，具体的实现不同。用于兼容不同的调度系统。
ZK数据存储结构： 隔离组1---+---appName1 : ip+port | | +---appName2 : ip+port | | .</description>
    </item>
    
  </channel>
</rss>